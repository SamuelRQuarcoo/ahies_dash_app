MORT1_table$ELIMINATION <- list(Sex = "Both sexes",
Mortality = "Total",
Locality = "Total",
Region = "Ghana")
MORT1_table$ELIMINATION <- list(Sex = "Both sexes",
Mortality = "Total",
Locality = "Total",
Region = "Ghana")
MORT1_table$CODES <- list(Sex = unique(MORT1_sum$Sex),
Locality = unique(MORT1_sum$Locality),
Mortality = unique(MORT1_sum$Mortality),
Region = unique(MORT1_sum$Region))
## Change filepath to own path
write.px(MORT1_table, filename = "C:/Users/user/Desktop/Folders/Data Science/StatsDenmark/code from Jesper/code from Jesper/pxtables/MORT1_table.px")
View(MORT1_table)
MORT1_table
## Using as.px.data.frame to make our dataset/dataframe to a px-file
MORT1_table <- as.px.data.frame(MORT1_sum,
## List keys is used to define optional key values for our PX-file
## First we set the title.
list.keys = list(TITLE = "Population by Age, Sex, Region and District 2010",
# Name of matrix (can be sorted by in pxweb)
MATRIX = "MORT1",
# Units used
UNITS = "Persons",
## subject code Note the name is in apostrophes as R doesn't
## accept '-' in variable names. The apostrophes however define
## that it's a variable name.
`SUBJECT-CODE` = "POP",
# subject area
`SUBJECT-AREA` = "Population",
# contents
CONTENTS = "POPULATION",
# How many decimals should we show. 0 because we can't have a half person
SHOWDECIMALS = 0,
LANGUAGE = "en",
# Hierarchy keyword, where we use the string made just before
`HIERARCHIES("Region")` = region_hier_px,
SOURCE = "Ghana Statistical Service (2021 PHC)",
NOTEX= "Household Deaths By Region, Type of Locality, Cause of Death and Sex"
))
MORT1_table$ELIMINATION <- list(Sex = "Both sexes",
Mortality = "Total",
Locality = "Total",
Region = "Ghana")
MORT1_table$CODES <- list(Sex = unique(MORT1_sum$Sex),
Locality = unique(MORT1_sum$Locality),
Mortality = unique(MORT1_sum$Mortality),
Region = unique(MORT1_sum$Region))
## Change filepath to own path
write.px(MORT1_table, filename = "C:/Users/user/Desktop/Folders/Data Science/StatsDenmark/code from Jesper/code from Jesper/pxtables/MORT1_table.px")
## Change filepath to own path
write.px(MORT1_table, filename = "C:/Users/user/Desktop/Folders/Data Science/StatsDenmark/code from Jesper/code from Jesper/pxtables/MORT1_table.px")
MORT1_sum
## Using as.px.data.frame to make our dataset/dataframe to a px-file
MORT1_table <- as.px.data.frame(MORT1_sum,
## List keys is used to define optional key values for our PX-file
## First we set the title.
list.keys = list(TITLE = "Household Deaths by Region, Type of Locality and Cause of Death (Accident, Violence, Homicide and Suicide)",
# Name of matrix (can be sorted by in pxweb)
MATRIX = "MORT1",
# Units used
UNITS = "Persons",
## subject code Note the name is in apostrophes as R doesn't
## accept '-' in variable names. The apostrophes however define
## that it's a variable name.
`SUBJECT-CODE` = "POP",
# subject area
`SUBJECT-AREA` = "Population",
# contents
CONTENTS = "POPULATION",
# How many decimals should we show. 0 because we can't have a half person
SHOWDECIMALS = 0,
LANGUAGE = "en",
# Hierarchy keyword, where we use the string made just before
`HIERARCHIES("Region")` = region_hier_px,
SOURCE = "Ghana Statistical Service (2021 PHC)",
NOTEX= "Household Deaths By Region, Type of Locality, Cause of Death and Sex"
))
MORT1_table$ELIMINATION <- list(Sex = "Both sexes",
Mortality = "Total",
Locality = "Total",
Region = "Ghana")
MORT1_table$CODES <- list(Sex = unique(MORT1_sum$Sex),
Locality = unique(MORT1_sum$Locality),
Mortality = unique(MORT1_sum$Mortality),
Region = unique(MORT1_sum$Region))
## Change filepath to own path
write.px(MORT1_table, filename = "C:/Users/user/Desktop/Folders/Data Science/StatsDenmark/code from Jesper/code from Jesper/pxtables/MORT1_table.px")
## Change filepath to own path
write.px(MORT1_table, filename = "C:/Users/user/Desktop/Folders/Data Science/StatsDenmark/code from Jesper/code from Jesper/pxtables/Table5-6.px")
reload <- readRDS(file = paste0(path_to_data, "mortality_2021.RData")) %>% as_tibble()
#a11d - Sex, p03a - Age,
#population <- reload %>% select(region, subdist, a11d)
population <- reload
#*
region_hier <- population %>%
select(region, subdist) %>% distinct() %>%  ## we take population data and only keeps region and regdist
transmute(pathString = paste("Ghana", region, subdist, sep = "_")) %>% # we make a variable called pathString, which holds a region and its district in this format: Ghana_region_district
FromDataFrameTable(pathDelimiter = "_") %>% # Use this pathString to make a hierary in form of a tree
ToDataFrameTree("name", "level") %>%        # Then we make the tree to a table where we have the name and level
mutate(level = case_when(level == 1 ~ '@',
level == 2 ~ '@@',
level == 3 ~ '@@@')) %>%
select(level, name) %>%  # Select the level and name
hier_import(from = "df")
#*
region_hier <- population %>%
select(region, subdist) %>% distinct() %>%  ## we take population data and only keeps region and regdist
transmute(pathString = paste("Ghana", region, subdist, sep = "_")) %>% # we make a variable called pathString, which holds a region and its district in this format: Ghana_region_district
FromDataFrameTable(pathDelimiter = "_") %>% # Use this pathString to make a hierary in form of a tree
ToDataFrameTree("name", "level") %>%        # Then we make the tree to a table where we have the name and level
mutate(level = case_when(level == 1 ~ '@',
level == 2 ~ '@@',
level == 3 ~ '@@@')) %>%
select(level, name) %>%  # Select the level and name
hier_import(from = "df")
region_hier
## Defining hierarchy for sex, calling the total for "Both sexes"
sex_hier <- hier_create(root = "Both Sexes", nodes = unique(population$mr02b))
sex_hier
population <- population %>%
mutate(mr02e1 = as.character(mr02e1)) %>%
filter(!is.na(mr02e1))
## Defining hierarchy for cause of death, accident, violence, homicide and suicide
cause_of_death_hier <- hier_create(root = "Total", nodes = unique(population$mr02e1))
cause_of_death_hier
local_hier <- hier_create(root = "Total", nodes = unique(population$urbrur))
local_hier
#*MAKING THE Px FILE
#*******************
#*
#*setting dimenstions
MORT1_dim <- list(mr02b = sex_hier,
subdist = region_hier,
urbrur =local_hier,
mr02e1 = cause_of_death_hier)
MORT1_dim
## Input data and list of variables afterwards
MORT1_prob <- makeProblem(population, dimList = MORT1_dim)
MORT1_prob
# Making it to a dataframe
MORT1_sum <- sdcProb2df(MORT1_prob) %>%
# and then making variables to factors holding both codes and text, and giving the names we want.
mutate(Region = factor(as.numeric(subdist), labels = unique(subdist_o)),
Sex = factor(as.numeric(mr02b), labels = unique(mr02b_o)),
Locality = factor(as.numeric(urbrur), labels = unique(urbrur_o)),
Mortality = factor(as.numeric(mr02e1), labels = unique(mr02e1_o))) %>%
## Select the variables we want. Note that variables will be showed in
##reversed order in PXweb than being written here (e.g. Region is last and will therefore
##be first in PXweb)
select(Mortality, Sex,Locality, Region, value = freq)
MORT1_sum
population
reload <- readRDS(file = paste0(path_to_data, "mortality_2021.RData")) %>% as_tibble()
#a11d - Sex, p03a - Age,
#population <- reload %>% select(region, subdist, a11d)
population <- reload
## Defining hierarchy for sex, calling the total for "Both sexes"
sex_hier <- hier_create(root = "Both Sexes", nodes = unique(population$mr02b))
population %>%
mutate(mr02e1 = as.character(mr02e1))
View(population)
filter(!is.na(mr02d))
population <- population %>%
mutate(mr02d = as.character(mr02d)) %>%
filter(!is.na(mr02d))
population
population
## Defining hierarchy for cause of death, accident, violence, homicide and suicide
cause_of_death_hier <- hier_create(root = "Total", nodes = unique(population$mr02e1))
cause_of_death_hier
local_hier <- hier_create(root = "Total", nodes = unique(population$urbrur))
local_hier
#*MAKING THE Px FILE
#*******************
#*
#*setting dimenstions
MORT1_dim <- list(mr02b = sex_hier,
subdist = region_hier,
urbrur =local_hier,
mr02e1 = cause_of_death_hier)
#View the list
MORT1_dim
## Input data and list of variables afterwards
MORT1_prob <- makeProblem(population, dimList = MORT1_dim)
# Making it to a dataframe
MORT1_sum <- sdcProb2df(MORT1_prob) %>%
# and then making variables to factors holding both codes and text, and giving the names we want.
mutate(Region = factor(as.numeric(subdist), labels = unique(subdist_o)),
Sex = factor(as.numeric(mr02b), labels = unique(mr02b_o)),
Locality = factor(as.numeric(urbrur), labels = unique(urbrur_o)),
Mortality = factor(as.numeric(mr02e1), labels = unique(mr02e1_o))) %>%
## Select the variables we want. Note that variables will be showed in
##reversed order in PXweb than being written here (e.g. Region is last and will therefore
##be first in PXweb)
select(Mortality, Sex,Locality, Region, value = freq)
#*MAKING THE Px FILE
#*******************
#*
#*setting dimenstions
MORT1_dim <- list(mr02b = sex_hier,
subdist = region_hier,
urbrur =local_hier,
mr02d = cause_of_death_hier)
#View the list
MORT1_dim
population <- population %>%
mutate(mr02d = as.character(mr02d)) %>%
filter(!is.na(mr02d))
## Defining hierarchy for cause of death, accident, violence, homicide and suicide
cause_of_death_hier <- hier_create(root = "Total", nodes = unique(population$mr02d))
cause_of_death_hier
local_hier <- hier_create(root = "Total", nodes = unique(population$urbrur))
local_hier
#*MAKING THE Px FILE
#*******************
#*
#*setting dimenstions
MORT1_dim <- list(mr02b = sex_hier,
subdist = region_hier,
urbrur =local_hier,
mr02d = cause_of_death_hier)
#View the list
MORT1_dim
## Input data and list of variables afterwards
MORT1_prob <- makeProblem(population, dimList = MORT1_dim)
# Making it to a dataframe
MORT1_sum <- sdcProb2df(MORT1_prob) %>%
# and then making variables to factors holding both codes and text, and giving the names we want.
mutate(Region = factor(as.numeric(subdist), labels = unique(subdist_o)),
Sex = factor(as.numeric(mr02b), labels = unique(mr02b_o)),
Locality = factor(as.numeric(urbrur), labels = unique(urbrur_o)),
Mortality = factor(as.numeric(mr02e1), labels = unique(mr02e1_o))) %>%
## Select the variables we want. Note that variables will be showed in
##reversed order in PXweb than being written here (e.g. Region is last and will therefore
##be first in PXweb)
select(Mortality, Sex,Locality, Region, value = freq)
# Making it to a dataframe
MORT1_sum <- sdcProb2df(MORT1_prob) %>%
# and then making variables to factors holding both codes and text, and giving the names we want.
mutate(Region = factor(as.numeric(subdist), labels = unique(subdist_o)),
Sex = factor(as.numeric(mr02b), labels = unique(mr02b_o)),
Locality = factor(as.numeric(urbrur), labels = unique(urbrur_o)),
Mortality = factor(as.numeric(mr02d), labels = unique(mr02d_o))) %>%
## Select the variables we want. Note that variables will be showed in
##reversed order in PXweb than being written here (e.g. Region is last and will therefore
##be first in PXweb)
select(Mortality, Sex,Locality, Region, value = freq)
MORT1_sum
# Tidyverse hold a lot of packages to do data cleaning and data manipulation. It also has its own website at tidyverse.org
# rio is for data import.
# haven is also for data import. Especially good for dta and sav files (Stata and SPSS)
# stringr is for handleling character/string values
# sjlabelled is for working with data with labels. Good to when imported files are Stata or SPSS-files.
# sdcTable is made to deal with problems of statistical disclosure. We will use some of its functionalities to calculate aggregates needed for our PX-file
# sdcHierarchies is complementary to sdcTable and can help defining dimensions and hierarchies in data
# data.tree is to help define hierarchies.
# janitor has a few functions to clean messy data.
# pxR to make px-files.
#dplyr and plyr are packages from the tidyverse use for data manipulation and wrangling
#the pacman package makes it easy to load and install a lot of packages at the same time
library("plyr")
library("dplyr")
library("tidyverse")
library("rio")
library("haven")
library("stringr")
library("sjlabelled")
library("sdcTable")
library("sdcHierarchies")
library("data.tree")
library("janitor")
library("pxR")
#library("pacman")
#p_load(tidyverse, rio, haven, stringr, sjlabelled, sdcTable, sdcHierarchies, data.tree, janitor, pxR)
# Reading first observation. We use option n_max to get only first observation.
## Remember to replace file-path with your own path. Note that the file-path in R use "/" and does not accept "\"
path_to_data <- "C:/Users/user/Desktop/Folders/Data Science/GSS_10_percent/10%_2021PHC_STATA/stata/"
census_10pct <- sjlabelled::as_label(read_stata(paste0(path_to_data, "mortality_10%_20221011d.dta")))
#defactopopn_10%_20221011d.dta
#mortality_10%_20221011d
##sample_rows <- sample(x = nrow(census_10pct), size = .01 * nrow(census_10pct), replace = F)
#get_label(census_10pct)
#census_10pct_1 <- census_10pct %>% select(region, subdist, p02, a11d) # select columns
saveRDS(census_10pct, file = paste0(path_to_data, "mortality_2021.RData")) #
reload <- readRDS(file = paste0(path_to_data, "mortality_2021.RData")) %>% as_tibble()
#a11d - Sex, p03a - Age,
#population <- reload %>% select(region, subdist, a11d)
population <- reload
## Making age brackets
# labs_5aar <- c(paste(seq(0, 115, by = 5),
#                      seq(0+5-1, 120-1, by = 5), sep = "-"),
#                paste(120, "+", sep = ""))
#
# population$p02 <- as.numeric(population$p02)
# population$age_5 <- cut(population$p02,
#                         breaks = c(seq(0, 120, by = 5), Inf),
#                         labels = labs_5aar, right = FALSE)
#
# labs_10_aar <- c(paste(seq(0, 110, by = 10),
#                        seq(0+10-1, 120-1, by =10),
#                        sep = "-"), paste(120,  "+", sep = ""))
# population$age_10 <- cut(population$p02, breaks = c(seq(0, 120, by = 10), Inf), labels = labs_10_aar, right = FALSE)
#*
region_hier <- population %>%
select(region, subdist) %>% distinct() %>%  ## we take population data and only keeps region and regdist
transmute(pathString = paste("Ghana", region, subdist, sep = "_")) %>% # we make a variable called pathString, which holds a region and its district in this format: Ghana_region_district
FromDataFrameTable(pathDelimiter = "_") %>% # Use this pathString to make a hierary in form of a tree
ToDataFrameTree("name", "level") %>%        # Then we make the tree to a table where we have the name and level
mutate(level = case_when(level == 1 ~ '@',
level == 2 ~ '@@',
level == 3 ~ '@@@')) %>%
select(level, name) %>%  # Select the level and name
hier_import(from = "df")
# Call total for age, all ages, nodes are the unique values of 5 year brackets
# age5_hier <- hier_create(root = "All ages",
#                          nodes = unique(population$age_5)) %>%
#   # However it's sorted in a wierd way, so we use that it's a factor variable,
#   #holding a numeric value assigned to the text, we get the numeric value by using unclass
#   mutate(sort = unclass(leaf)) %>%
#   arrange(leaf) %>% ## Sorting by the numeric value
#   select(-sort)
## Defining hierarchy for sex, calling the total for "Both sexes"
sex_hier <- hier_create(root = "Both Sexes", nodes = unique(population$mr02b))
population <- population %>%
mutate(mr02d = as.character(mr02d)) %>%
filter(!is.na(mr02d))
## Defining hierarchy for cause of death, accident, violence, homicide and suicide
cause_of_death_hier <- hier_create(root = "Total", nodes = unique(population$mr02d))
cause_of_death_hier
local_hier <- hier_create(root = "Total", nodes = unique(population$urbrur))
local_hier
#*MAKING THE Px FILE
#*******************
#*
#*setting dimenstions
MORT1_dim <- list(mr02b = sex_hier,
subdist = region_hier,
urbrur =local_hier,
mr02d = cause_of_death_hier)
#View the list
MORT1_dim
## Input data and list of variables afterwards
MORT1_prob <- makeProblem(population, dimList = MORT1_dim)
# Making it to a dataframe
MORT1_sum <- sdcProb2df(MORT1_prob) %>%
# and then making variables to factors holding both codes and text, and giving the names we want.
mutate(Region = factor(as.numeric(subdist), labels = unique(subdist_o)),
Sex = factor(as.numeric(mr02b), labels = unique(mr02b_o)),
Locality = factor(as.numeric(urbrur), labels = unique(urbrur_o)),
Mortality = factor(as.numeric(mr02d), labels = unique(mr02d_o))) %>%
## Select the variables we want. Note that variables will be showed in
##reversed order in PXweb than being written here (e.g. Region is last and will therefore
##be first in PXweb)
select(Mortality, Sex,Locality, Region, value = freq)
# Freq is the variable showing number of observations in the group.
#The PX functions in R expect this to be called value, so we rename freq to value
head(MORT1_sum)
#*EXPORTING THE Px FILE
#*
region_hier_px <- region_hier %>%
# Making the variable test, where levels are divided by :
mutate(test = ifelse(level == 1, unclass(root), paste(unclass(root), unclass(leaf), sep = "\":\""))) %>%
## Saves the variable as a vector, so just a long text string.
pull(test)
## Using as.px.data.frame to make our dataset/dataframe to a px-file
MORT1_table <- as.px.data.frame(MORT1_sum,
## List keys is used to define optional key values for our PX-file
## First we set the title.
list.keys = list(TITLE = "Household Deaths by Region, Type of Locality and Cause of Death (Accident, Violence, Homicide and Suicide)",
# Name of matrix (can be sorted by in pxweb)
MATRIX = "MORT1",
# Units used
UNITS = "Persons",
## subject code Note the name is in apostrophes as R doesn't
## accept '-' in variable names. The apostrophes however define
## that it's a variable name.
`SUBJECT-CODE` = "POP",
# subject area
`SUBJECT-AREA` = "Population",
# contents
CONTENTS = "POPULATION",
# How many decimals should we show. 0 because we can't have a half person
SHOWDECIMALS = 0,
LANGUAGE = "en",
# Hierarchy keyword, where we use the string made just before
`HIERARCHIES("Region")` = region_hier_px,
SOURCE = "Ghana Statistical Service (2021 PHC)",
NOTEX= "Household Deaths By Region, Type of Locality, Cause of Death and Sex"
))
MORT1_table$ELIMINATION <- list(Sex = "Both sexes",
Mortality = "Total",
Locality = "Total",
Region = "Ghana")
MORT1_table$CODES <- list(Sex = unique(MORT1_sum$Sex),
Locality = unique(MORT1_sum$Locality),
Mortality = unique(MORT1_sum$Mortality),
Region = unique(MORT1_sum$Region))
#POP1$CODES <- list(Sex = unique(POP1_sum$Sex), Age = unique(POP1_sum$Age, Region = POP1_sum$Region))
## Change filepath to own path
write.px(MORT1_table, filename = "C:/Users/user/Desktop/Folders/Data Science/StatsDenmark/code from Jesper/code from Jesper/pxtables/Table5-6.px")
shiny::runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp()
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp()
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
# 1 - SET THE SCENE# load required packages
library(shiny)          # web app framework
library(shinyjs)        # improve user experience with JavaScript
library(shinythemes)    # themes for shiny
library(tidyverse)      # data manipulation
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp()
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp()
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp()
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp()
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp()
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp()
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
runApp('C:/Users/user/Desktop/shiny_apps/test_app/testApp')
shiny::runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
install.packages("ggplot2")
install.packages("ggplot2")
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
shiny::runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
#**************************************************
#*USER INTERFACE
#**************************************************
#*
?layout_column_wrap
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp()
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp()
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp()
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp()
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp()
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp()
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
shiny::runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
runApp('C:/Users/user/Desktop/shiny_apps/ahies_app')
shiny::runApp('C:/Users/user/Desktop/shiny_apps/ahies_app/ahies_app')
runApp()
setwd("C:/Users/user/Desktop/shiny_apps/ahies_dash_app")
library(shiny)
port <- Sys.getenv('PORT')
shiny::runApp(
appDir = getwd(),
host = '0.0.0.0',
port = as.numeric(port)
)
